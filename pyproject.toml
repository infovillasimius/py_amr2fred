[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "py_amr2fred"
version = "1.0.0"
description = "A Python toolkit for converting Abstract Meaning Representation (AMR) to FRED (Formal Representation of Events and their Dynamics)"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "GPL-3.0"}
authors = [
    {name = "AMR2FRED Contributors"}
]
keywords = [
    "amr",
    "fred", 
    "nlp",
    "semantic-parsing",
    "knowledge-representation",
    "rdf",
    "owl"
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
    "rdflib>=6.0.0",
    "requests>=2.25.0",
    "pathlib2>=2.3.0;python_version<'3.4'",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.10.0",
    "pytest-mock>=3.0.0",
    "pytest-timeout>=1.4.0",
    "black>=21.0.0",
    "flake8>=3.8.0",
    "mypy>=0.800"
]

[project.urls]
Homepage = "https://github.com/infovillasimius/py_amr2fred"
Documentation = "https://py-amr2fred.readthedocs.io/"
Repository = "https://github.com/infovillasimius/py_amr2fred.git"
Issues = "https://github.com/infovillasimius/py_amr2fred/issues"

[tool.setuptools]
packages = ["py_amr2fred"]

[tool.setuptools.package-data]
py_amr2fred = [
    "config/*.json",
    "*.tsv",
]

[tool.setuptools.exclude-package-data]
"*" = [
    "*.pyc",
    "__pycache__/*",
    "*.egg-info/*"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--tb=short"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true